"""

The recursive generators that are used to simplify combinatorial constructs such as permutations, combinations, and Cartesian products are called combinatoric iterators.

This function returns a subsequence of length n from the elements of the iterable where n is the argument that the function takes determining the length of the subsequences generated by the function. Individual elements may repeat itself in combinations_with_replacement function.

"""

from itertools import combinations_with_replacement
 
print("All the combination of string in sorted order(with replacement) is:")
print(list(combinations_with_replacement("AB", 2)))
print()
 
print("All the combination of list in sorted order(with replacement) is:")
print(list(combinations_with_replacement([1, 2], 2)))
print()
 
print("All the combination of container in sorted order(with replacement) is:")
print(list(combinations_with_replacement(range(2), 1)))


# Output:
# All the combination of string in sorted order(with replacement) is:
# [('A', 'A'), ('A', 'B'), ('B', 'B')]

# All the combination of list in sorted order(with replacement) is:
# [(1, 1), (1, 2), (2, 2)]

# All the combination of container in sorted order(with replacement) is:
# [(0, ), (1, )]