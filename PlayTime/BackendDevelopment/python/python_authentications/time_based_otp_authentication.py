"""

Authenticate using a unique six-digit pin generated by Google Authenticator, you need to implement Time-based One-Time Password (TOTP) authentication. This involves using a shared secret between the server and the user's Google Authenticator app, which generates the six-digit code that is valid for a short period (typically 30 seconds).

Explanation:

User Registration:
- When a user registers (or sets up two-factor authentication), you generate a shared secret using pyotp.random_base32().
- This secret is stored on the server (in the users_db for simplicity, but typically in a database).

Generate a QR Code:
- The /generate-qr/<username> route generates a QR code containing the TOTP URI, which is encoded with the shared secret.
- The QR code is displayed, and the user scans it with Google Authenticator. This sets up the app to generate six-digit pins based on the shared secret.

Verify the PIN:
- The /verify-pin/<username> route receives a POST request with a six-digit pin (pin) in the body.
- The server retrieves the secret for the user and uses pyotp.TOTP(secret).verify(pin) to check if the provided pin is valid for the current time window.
- If valid, the server responds with a 200 OK status, otherwise a 401 Unauthorized.

"""

# pip install pyotp qrcode[pil] Flask

import pyotp
import qrcode
from flask import Flask, request, jsonify, send_file
from io import BytesIO

app = Flask(__name__)

# Simulated user database to store shared secrets
users_db = {}

# Generate TOTP URI and display a QR code for Google Authenticator
def generate_totp_uri(username, secret):
    """Generate the TOTP URI for Google Authenticator."""
    return pyotp.totp.TOTP(secret).provisioning_uri(
        username, issuer_name="MySecureApp"
    )

@app.route('/generate-qr/<username>', methods=['GET'])
def generate_qr(username):
    """Generate and return the QR code for the user to scan."""
    # Generate a unique secret for the user
    secret = pyotp.random_base32()
    users_db[username] = secret  # Save the secret in the user database

    # Generate TOTP URI and QR code
    totp_uri = generate_totp_uri(username, secret)
    qr = qrcode.make(totp_uri)

    # Convert QR code to an image and send it as a response
    img_io = BytesIO()
    qr.save(img_io, 'PNG')
    img_io.seek(0)

    return send_file(img_io, mimetype='image/png')

@app.route('/verify-pin/<username>', methods=['POST'])
def verify_pin(username):
    """Verify the six-digit PIN entered by the user."""
    pin = request.json.get('pin')
    
    if username not in users_db:
        return jsonify({"message": "User not found!"}), 404

    secret = users_db[username]
    totp = pyotp.TOTP(secret)

    # Verify the provided PIN
    if totp.verify(pin):
        return jsonify({"message": "PIN is valid!"}), 200
    else:
        return jsonify({"message": "Invalid PIN!"}), 401

if __name__ == "__main__":
    app.run(debug=True)
